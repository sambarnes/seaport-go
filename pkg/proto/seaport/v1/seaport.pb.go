// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/seaport/v1/seaport.proto

package seaportv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// * The ItemType designates the type of item, with valid types being Ether
// (or other native token for the given chain), ERC20, ERC721, ERC1155,
// ERC721 with "criteria" (explained below), and ERC1155 with criteria.
type ItemType int32

const (
	ItemType_ITEM_TYPE_NATIVE                ItemType = 0
	ItemType_ITEM_TYPE_ERC20                 ItemType = 1
	ItemType_ITEM_TYPE_ERC721                ItemType = 2
	ItemType_ITEM_TYPE_ERC1155               ItemType = 3
	ItemType_ITEM_TYPE_ERC721_WITH_CRITERIA  ItemType = 4
	ItemType_ITEM_TYPE_ERC1155_WITH_CRITERIA ItemType = 5
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "ITEM_TYPE_NATIVE",
		1: "ITEM_TYPE_ERC20",
		2: "ITEM_TYPE_ERC721",
		3: "ITEM_TYPE_ERC1155",
		4: "ITEM_TYPE_ERC721_WITH_CRITERIA",
		5: "ITEM_TYPE_ERC1155_WITH_CRITERIA",
	}
	ItemType_value = map[string]int32{
		"ITEM_TYPE_NATIVE":                0,
		"ITEM_TYPE_ERC20":                 1,
		"ITEM_TYPE_ERC721":                2,
		"ITEM_TYPE_ERC1155":               3,
		"ITEM_TYPE_ERC721_WITH_CRITERIA":  4,
		"ITEM_TYPE_ERC1155_WITH_CRITERIA": 5,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_seaport_v1_seaport_proto_enumTypes[0].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_proto_seaport_v1_seaport_proto_enumTypes[0]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_proto_seaport_v1_seaport_proto_rawDescGZIP(), []int{0}
}

// * The OrderType designates one of four types for the order depending on
// two distinct preferences:
//
// FULL indicates that the order does not support partial fills,
// whereas PARTIAL enables filling some fraction of the order, with the
// important caveat that each item must be cleanly divisible by the supplied
// fraction (i.e. no remainder after division).
//
// OPEN indicates that the call to execute the order can be submitted by
// any account, whereas RESTRICTED requires that the order either be executed
// by the offerer or the zone of the order, or that a magic value indicating
// that the order is approved is returned upon calling validateOrder on
// the zone.
type OrderType int32

const (
	OrderType_ORDER_TYPE_FULL_OPEN          OrderType = 0
	OrderType_ORDER_TYPE_PARTIAL_OPEN       OrderType = 1
	OrderType_ORDER_TYPE_FULL_RESTRICTED    OrderType = 2
	OrderType_ORDER_TYPE_PARTIAL_RESTRICTED OrderType = 3
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_FULL_OPEN",
		1: "ORDER_TYPE_PARTIAL_OPEN",
		2: "ORDER_TYPE_FULL_RESTRICTED",
		3: "ORDER_TYPE_PARTIAL_RESTRICTED",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_FULL_OPEN":          0,
		"ORDER_TYPE_PARTIAL_OPEN":       1,
		"ORDER_TYPE_FULL_RESTRICTED":    2,
		"ORDER_TYPE_PARTIAL_RESTRICTED": 3,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_seaport_v1_seaport_proto_enumTypes[1].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_proto_seaport_v1_seaport_proto_enumTypes[1]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_seaport_v1_seaport_proto_rawDescGZIP(), []int{1}
}

// *
// This is and item required in exchange for an offer.
type ConsiderationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType             ItemType `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3,enum=proto.seaport.v1.ItemType" json:"item_type,omitempty"`
	Token                *H160    `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	IdentifierOrCriteria *H256    `protobuf:"bytes,3,opt,name=identifier_or_criteria,json=identifierOrCriteria,proto3" json:"identifier_or_criteria,omitempty"` // uint256
	StartAmount          *H256    `protobuf:"bytes,4,opt,name=start_amount,json=startAmount,proto3" json:"start_amount,omitempty"`                              // uint256
	EndAmount            *H256    `protobuf:"bytes,5,opt,name=end_amount,json=endAmount,proto3" json:"end_amount,omitempty"`                                    // uint256
	Recipient            *H160    `protobuf:"bytes,6,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (x *ConsiderationItem) Reset() {
	*x = ConsiderationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_seaport_v1_seaport_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsiderationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsiderationItem) ProtoMessage() {}

func (x *ConsiderationItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_seaport_v1_seaport_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsiderationItem.ProtoReflect.Descriptor instead.
func (*ConsiderationItem) Descriptor() ([]byte, []int) {
	return file_proto_seaport_v1_seaport_proto_rawDescGZIP(), []int{0}
}

func (x *ConsiderationItem) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_ITEM_TYPE_NATIVE
}

func (x *ConsiderationItem) GetToken() *H160 {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ConsiderationItem) GetIdentifierOrCriteria() *H256 {
	if x != nil {
		return x.IdentifierOrCriteria
	}
	return nil
}

func (x *ConsiderationItem) GetStartAmount() *H256 {
	if x != nil {
		return x.StartAmount
	}
	return nil
}

func (x *ConsiderationItem) GetEndAmount() *H256 {
	if x != nil {
		return x.EndAmount
	}
	return nil
}

func (x *ConsiderationItem) GetRecipient() *H160 {
	if x != nil {
		return x.Recipient
	}
	return nil
}

// *
// This is an item offered in exchange for consideration.
type OfferItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType ItemType `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3,enum=proto.seaport.v1.ItemType" json:"item_type,omitempty"`
	// * The token designates the account of the item's token contract
	// (with the null address used for Ether or other native tokens).
	Token *H160 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// * The identifier_or_criteria represents either the ERC721 or ERC1155
	// token identifier or, in the case of a criteria-based item type, a
	// merkle root composed of the valid set of token identifiers for
	// the item. This value will be ignored for Ether and ERC20 item types,
	// and can optionally be zero for criteria-based item types to allow
	// for any identifier.
	IdentifierOrCriteria *H256 `protobuf:"bytes,3,opt,name=identifier_or_criteria,json=identifierOrCriteria,proto3" json:"identifier_or_criteria,omitempty"`
	// * The start_amount represents the amount of the item in question that
	// will be required should the order be fulfilled at the moment the
	// order becomes active.
	StartAmount *H256 `protobuf:"bytes,4,opt,name=start_amount,json=startAmount,proto3" json:"start_amount,omitempty"`
	// * The end_amount represents the amount of the item in question that
	// will be required should the order be fulfilled at the moment the
	// order expires. If this value differs from the item's start_amount,
	// the realized amount is calculated linearly based on the time elapsed
	// since the order became active.
	EndAmount *H256 `protobuf:"bytes,5,opt,name=end_amount,json=endAmount,proto3" json:"end_amount,omitempty"` // uint256
}

func (x *OfferItem) Reset() {
	*x = OfferItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_seaport_v1_seaport_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferItem) ProtoMessage() {}

func (x *OfferItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_seaport_v1_seaport_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferItem.ProtoReflect.Descriptor instead.
func (*OfferItem) Descriptor() ([]byte, []int) {
	return file_proto_seaport_v1_seaport_proto_rawDescGZIP(), []int{1}
}

func (x *OfferItem) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_ITEM_TYPE_NATIVE
}

func (x *OfferItem) GetToken() *H160 {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *OfferItem) GetIdentifierOrCriteria() *H256 {
	if x != nil {
		return x.IdentifierOrCriteria
	}
	return nil
}

func (x *OfferItem) GetStartAmount() *H256 {
	if x != nil {
		return x.StartAmount
	}
	return nil
}

func (x *OfferItem) GetEndAmount() *H256 {
	if x != nil {
		return x.EndAmount
	}
	return nil
}

// * Each order contains ten key components
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * The offerer of the order supplies all offered items and must either
	// fulfill the order personally (i.e. msg.sender == offerer) or approve
	// the order via signature (either standard 65-byte EDCSA, 64-byte
	// EIP-2098, or an EIP-1271 isValidSignature check) or by listing
	// the order on-chain (i.e. calling validate).
	Offerer *H160 `protobuf:"bytes,1,opt,name=offerer,proto3" json:"offerer,omitempty"`
	// * The zone of the order is an optional secondary account attached to the
	// order with two additional privileges:
	//
	// The zone may cancel orders where it is named as the zone by calling
	// cancel. (Note that offerers can also cancel their own orders, either
	// individually or for all orders signed with their current counter at
	// once by calling incrementCounter).
	// "Restricted" orders (as specified by the order type) must either be
	// executed by the zone or the offerer, or must be approved as indicated
	// by a call to an validateOrder on the zone.
	Zone *H160 `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// * The offers array contains an array of items that may be transferred
	// from the offerer's account.
	Offer []*OfferItem `protobuf:"bytes,3,rep,name=offer,proto3" json:"offer,omitempty"`
	// * The consideration contains an array of items that must be received
	// in order to fulfill the order. It contains all of the same components
	// as an offered item, and additionally includes a recipient that will
	// receive each item. This array may be extended by the fulfiller on
	// order fulfillment so as to support "tipping" (e.g. relayer or
	// referral payments)
	Consideration []*ConsiderationItem `protobuf:"bytes,4,rep,name=consideration,proto3" json:"consideration,omitempty"`
	OrderType     OrderType            `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3,enum=proto.seaport.v1.OrderType" json:"order_type,omitempty"`
	// * The start_time indicates the block timestamp at which the order
	// becomes active.
	StartTime *H256 `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// * The end_time indicates the block timestamp at which the order expires.
	// This value and the startTime are used in conjunction with the
	// start_amount and end_amount of each item to derive their current amount.
	EndTime *H256 `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// * The zoneHash represents an arbitrary 32-byte value that will be
	// supplied to the zone when fulfilling restricted orders that the zone
	// can utilize when making a determination on whether to authorize the order.
	ZoneHash *H256 `protobuf:"bytes,8,opt,name=zone_hash,json=zoneHash,proto3" json:"zone_hash,omitempty"`
	// * The salt represents an arbitrary source of entropy for the order.
	Salt *H256 `protobuf:"bytes,9,opt,name=salt,proto3" json:"salt,omitempty"`
	// * The conduit_key is a bytes32 value that indicates what conduit,
	// if any, should be utilized as a source for token approvals when
	// performing transfers. By default (i.e. when conduitKey is set to the
	// zero hash), the offerer will grant ERC20, ERC721, and ERC1155 token
	// approvals to Seaport directly so that it can perform any transfers
	// specified by the order during fulfillment. In contrast, an offerer
	// that elects to utilize a conduit will grant token approvals to the
	// conduit contract corresponding to the supplied conduit key, and
	// Seaport will then instruct that conduit to transfer the respective
	// tokens.
	ConduitKey *H256 `protobuf:"bytes,10,opt,name=conduit_key,json=conduitKey,proto3" json:"conduit_key,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_seaport_v1_seaport_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_proto_seaport_v1_seaport_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_proto_seaport_v1_seaport_proto_rawDescGZIP(), []int{2}
}

func (x *Order) GetOfferer() *H160 {
	if x != nil {
		return x.Offerer
	}
	return nil
}

func (x *Order) GetZone() *H160 {
	if x != nil {
		return x.Zone
	}
	return nil
}

func (x *Order) GetOffer() []*OfferItem {
	if x != nil {
		return x.Offer
	}
	return nil
}

func (x *Order) GetConsideration() []*ConsiderationItem {
	if x != nil {
		return x.Consideration
	}
	return nil
}

func (x *Order) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_FULL_OPEN
}

func (x *Order) GetStartTime() *H256 {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Order) GetEndTime() *H256 {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Order) GetZoneHash() *H256 {
	if x != nil {
		return x.ZoneHash
	}
	return nil
}

func (x *Order) GetSalt() *H256 {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *Order) GetConduitKey() *H256 {
	if x != nil {
		return x.ConduitKey
	}
	return nil
}

type SignedOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *Order        `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
	Signature  *EthSignature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedOrder) Reset() {
	*x = SignedOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_seaport_v1_seaport_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedOrder) ProtoMessage() {}

func (x *SignedOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_seaport_v1_seaport_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedOrder.ProtoReflect.Descriptor instead.
func (*SignedOrder) Descriptor() ([]byte, []int) {
	return file_proto_seaport_v1_seaport_proto_rawDescGZIP(), []int{3}
}

func (x *SignedOrder) GetParameters() *Order {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SignedOrder) GetSignature() *EthSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_proto_seaport_v1_seaport_proto protoreflect.FileDescriptor

var file_proto_seaport_v1_seaport_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf0, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x31, 0x36, 0x30, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4c, 0x0a,
	0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x32, 0x35, 0x36, 0x52, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x4f, 0x72, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x39, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x32,
	0x35, 0x36, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x31, 0x36, 0x30, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x22, 0xb2, 0x02, 0x0a, 0x09, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x31, 0x36,
	0x30, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x32, 0x35, 0x36,
	0x52, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4f, 0x72, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa3, 0x04, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x31, 0x36, 0x30, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x31, 0x36, 0x30, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x31, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x52,
	0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x52,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x69, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x32,
	0x35, 0x36, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x84,
	0x01, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74,
	0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0xab, 0x01, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x37, 0x32,
	0x31, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x52, 0x43, 0x31, 0x31, 0x35, 0x35, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x37, 0x32, 0x31, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x41, 0x10, 0x04, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x31,
	0x31, 0x35, 0x35, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49,
	0x41, 0x10, 0x05, 0x2a, 0x85, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x42, 0xc6, 0x01, 0x0a, 0x14,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x61, 0x6d, 0x62, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x61, 0x70, 0x6f,
	0x72, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x53, 0x58, 0xaa, 0x02, 0x10, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a, 0x53, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_seaport_v1_seaport_proto_rawDescOnce sync.Once
	file_proto_seaport_v1_seaport_proto_rawDescData = file_proto_seaport_v1_seaport_proto_rawDesc
)

func file_proto_seaport_v1_seaport_proto_rawDescGZIP() []byte {
	file_proto_seaport_v1_seaport_proto_rawDescOnce.Do(func() {
		file_proto_seaport_v1_seaport_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_seaport_v1_seaport_proto_rawDescData)
	})
	return file_proto_seaport_v1_seaport_proto_rawDescData
}

var file_proto_seaport_v1_seaport_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_seaport_v1_seaport_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_seaport_v1_seaport_proto_goTypes = []interface{}{
	(ItemType)(0),             // 0: proto.seaport.v1.ItemType
	(OrderType)(0),            // 1: proto.seaport.v1.OrderType
	(*ConsiderationItem)(nil), // 2: proto.seaport.v1.ConsiderationItem
	(*OfferItem)(nil),         // 3: proto.seaport.v1.OfferItem
	(*Order)(nil),             // 4: proto.seaport.v1.Order
	(*SignedOrder)(nil),       // 5: proto.seaport.v1.SignedOrder
	(*H160)(nil),              // 6: proto.seaport.v1.H160
	(*H256)(nil),              // 7: proto.seaport.v1.H256
	(*EthSignature)(nil),      // 8: proto.seaport.v1.EthSignature
}
var file_proto_seaport_v1_seaport_proto_depIdxs = []int32{
	0,  // 0: proto.seaport.v1.ConsiderationItem.item_type:type_name -> proto.seaport.v1.ItemType
	6,  // 1: proto.seaport.v1.ConsiderationItem.token:type_name -> proto.seaport.v1.H160
	7,  // 2: proto.seaport.v1.ConsiderationItem.identifier_or_criteria:type_name -> proto.seaport.v1.H256
	7,  // 3: proto.seaport.v1.ConsiderationItem.start_amount:type_name -> proto.seaport.v1.H256
	7,  // 4: proto.seaport.v1.ConsiderationItem.end_amount:type_name -> proto.seaport.v1.H256
	6,  // 5: proto.seaport.v1.ConsiderationItem.recipient:type_name -> proto.seaport.v1.H160
	0,  // 6: proto.seaport.v1.OfferItem.item_type:type_name -> proto.seaport.v1.ItemType
	6,  // 7: proto.seaport.v1.OfferItem.token:type_name -> proto.seaport.v1.H160
	7,  // 8: proto.seaport.v1.OfferItem.identifier_or_criteria:type_name -> proto.seaport.v1.H256
	7,  // 9: proto.seaport.v1.OfferItem.start_amount:type_name -> proto.seaport.v1.H256
	7,  // 10: proto.seaport.v1.OfferItem.end_amount:type_name -> proto.seaport.v1.H256
	6,  // 11: proto.seaport.v1.Order.offerer:type_name -> proto.seaport.v1.H160
	6,  // 12: proto.seaport.v1.Order.zone:type_name -> proto.seaport.v1.H160
	3,  // 13: proto.seaport.v1.Order.offer:type_name -> proto.seaport.v1.OfferItem
	2,  // 14: proto.seaport.v1.Order.consideration:type_name -> proto.seaport.v1.ConsiderationItem
	1,  // 15: proto.seaport.v1.Order.order_type:type_name -> proto.seaport.v1.OrderType
	7,  // 16: proto.seaport.v1.Order.start_time:type_name -> proto.seaport.v1.H256
	7,  // 17: proto.seaport.v1.Order.end_time:type_name -> proto.seaport.v1.H256
	7,  // 18: proto.seaport.v1.Order.zone_hash:type_name -> proto.seaport.v1.H256
	7,  // 19: proto.seaport.v1.Order.salt:type_name -> proto.seaport.v1.H256
	7,  // 20: proto.seaport.v1.Order.conduit_key:type_name -> proto.seaport.v1.H256
	4,  // 21: proto.seaport.v1.SignedOrder.parameters:type_name -> proto.seaport.v1.Order
	8,  // 22: proto.seaport.v1.SignedOrder.signature:type_name -> proto.seaport.v1.EthSignature
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_proto_seaport_v1_seaport_proto_init() }
func file_proto_seaport_v1_seaport_proto_init() {
	if File_proto_seaport_v1_seaport_proto != nil {
		return
	}
	file_proto_seaport_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_seaport_v1_seaport_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsiderationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_seaport_v1_seaport_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_seaport_v1_seaport_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_seaport_v1_seaport_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_seaport_v1_seaport_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_seaport_v1_seaport_proto_goTypes,
		DependencyIndexes: file_proto_seaport_v1_seaport_proto_depIdxs,
		EnumInfos:         file_proto_seaport_v1_seaport_proto_enumTypes,
		MessageInfos:      file_proto_seaport_v1_seaport_proto_msgTypes,
	}.Build()
	File_proto_seaport_v1_seaport_proto = out.File
	file_proto_seaport_v1_seaport_proto_rawDesc = nil
	file_proto_seaport_v1_seaport_proto_goTypes = nil
	file_proto_seaport_v1_seaport_proto_depIdxs = nil
}
