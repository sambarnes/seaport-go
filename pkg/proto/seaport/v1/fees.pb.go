// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/seaport/v1/fees.proto

package seaportv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeeStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maker *TradeFees `protobuf:"bytes,1,opt,name=maker,proto3" json:"maker,omitempty"`
	Taker *TradeFees `protobuf:"bytes,2,opt,name=taker,proto3" json:"taker,omitempty"`
	// A fee or rebate on notional value written via Clear expressed in basis points.
	ClearWriteNotionalBps int32 `protobuf:"varint,3,opt,name=clear_write_notional_bps,json=clearWriteNotionalBps,proto3" json:"clear_write_notional_bps,omitempty"`
	// A fee or rebate on underlying asset notional value redeemed via Clear expressed in basis points.
	ClearRedeemedNotionalBps int32 `protobuf:"varint,4,opt,name=clear_redeemed_notional_bps,json=clearRedeemedNotionalBps,proto3" json:"clear_redeemed_notional_bps,omitempty"`
	// A fee or rebate on notional value exercised via Clear expressed in basis points.
	ClearExerciseNotionalBps int32 `protobuf:"varint,5,opt,name=clear_exercise_notional_bps,json=clearExerciseNotionalBps,proto3" json:"clear_exercise_notional_bps,omitempty"`
	// The address fees must be paid to or rebates are received from.
	Address *H160 `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *FeeStructure) Reset() {
	*x = FeeStructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_seaport_v1_fees_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeStructure) ProtoMessage() {}

func (x *FeeStructure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_seaport_v1_fees_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeStructure.ProtoReflect.Descriptor instead.
func (*FeeStructure) Descriptor() ([]byte, []int) {
	return file_proto_seaport_v1_fees_proto_rawDescGZIP(), []int{0}
}

func (x *FeeStructure) GetMaker() *TradeFees {
	if x != nil {
		return x.Maker
	}
	return nil
}

func (x *FeeStructure) GetTaker() *TradeFees {
	if x != nil {
		return x.Taker
	}
	return nil
}

func (x *FeeStructure) GetClearWriteNotionalBps() int32 {
	if x != nil {
		return x.ClearWriteNotionalBps
	}
	return 0
}

func (x *FeeStructure) GetClearRedeemedNotionalBps() int32 {
	if x != nil {
		return x.ClearRedeemedNotionalBps
	}
	return 0
}

func (x *FeeStructure) GetClearExerciseNotionalBps() int32 {
	if x != nil {
		return x.ClearExerciseNotionalBps
	}
	return 0
}

func (x *FeeStructure) GetAddress() *H160 {
	if x != nil {
		return x.Address
	}
	return nil
}

type TradeFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A fee or rebate on notional value traded expressed in basis points.
	NotionalBps int32 `protobuf:"varint,1,opt,name=notional_bps,json=notionalBps,proto3" json:"notional_bps,omitempty"`
	// A fee or rebate on premia or credit value traded expressed in basis points.
	PremiumBps int32 `protobuf:"varint,2,opt,name=premium_bps,json=premiumBps,proto3" json:"premium_bps,omitempty"`
	// A fee or rebate on spot value traded expressed in basis points.
	SpotBps int32 `protobuf:"varint,3,opt,name=spot_bps,json=spotBps,proto3" json:"spot_bps,omitempty"`
	// A flat relayer fee or rebate expressed in 1e-6 USDC (dust)g - used for non-valued offers/considerations
	// such as NFTs.
	Flat int32 `protobuf:"varint,4,opt,name=flat,proto3" json:"flat,omitempty"`
}

func (x *TradeFees) Reset() {
	*x = TradeFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_seaport_v1_fees_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeFees) ProtoMessage() {}

func (x *TradeFees) ProtoReflect() protoreflect.Message {
	mi := &file_proto_seaport_v1_fees_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeFees.ProtoReflect.Descriptor instead.
func (*TradeFees) Descriptor() ([]byte, []int) {
	return file_proto_seaport_v1_fees_proto_rawDescGZIP(), []int{1}
}

func (x *TradeFees) GetNotionalBps() int32 {
	if x != nil {
		return x.NotionalBps
	}
	return 0
}

func (x *TradeFees) GetPremiumBps() int32 {
	if x != nil {
		return x.PremiumBps
	}
	return 0
}

func (x *TradeFees) GetSpotBps() int32 {
	if x != nil {
		return x.SpotBps
	}
	return 0
}

func (x *TradeFees) GetFlat() int32 {
	if x != nil {
		return x.Flat
	}
	return 0
}

var File_proto_seaport_v1_fees_proto protoreflect.FileDescriptor

var file_proto_seaport_v1_fees_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x02,
	0x0a, 0x0c, 0x46, 0x65, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x65, 0x65, 0x73, 0x52, 0x05, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x65, 0x65, 0x73, 0x52, 0x05, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x70, 0x73, 0x12, 0x3d, 0x0a,
	0x1b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x1b,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x18, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x31, 0x36, 0x30, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7e, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x65, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x70, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x42, 0x70, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x42, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x32, 0x59, 0x0a,
	0x0b, 0x46, 0x65, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0xc3, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x42, 0x09, 0x46, 0x65, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x6d, 0x62, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x67, 0x6f, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x50, 0x53, 0x58, 0xaa, 0x02, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c,
	0x53, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5c, 0x53, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x3a, 0x3a, 0x53, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_seaport_v1_fees_proto_rawDescOnce sync.Once
	file_proto_seaport_v1_fees_proto_rawDescData = file_proto_seaport_v1_fees_proto_rawDesc
)

func file_proto_seaport_v1_fees_proto_rawDescGZIP() []byte {
	file_proto_seaport_v1_fees_proto_rawDescOnce.Do(func() {
		file_proto_seaport_v1_fees_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_seaport_v1_fees_proto_rawDescData)
	})
	return file_proto_seaport_v1_fees_proto_rawDescData
}

var file_proto_seaport_v1_fees_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_seaport_v1_fees_proto_goTypes = []interface{}{
	(*FeeStructure)(nil), // 0: proto.seaport.v1.FeeStructure
	(*TradeFees)(nil),    // 1: proto.seaport.v1.TradeFees
	(*H160)(nil),         // 2: proto.seaport.v1.H160
	(*Empty)(nil),        // 3: proto.seaport.v1.Empty
}
var file_proto_seaport_v1_fees_proto_depIdxs = []int32{
	1, // 0: proto.seaport.v1.FeeStructure.maker:type_name -> proto.seaport.v1.TradeFees
	1, // 1: proto.seaport.v1.FeeStructure.taker:type_name -> proto.seaport.v1.TradeFees
	2, // 2: proto.seaport.v1.FeeStructure.address:type_name -> proto.seaport.v1.H160
	3, // 3: proto.seaport.v1.FeesService.GetFeeStructure:input_type -> proto.seaport.v1.Empty
	0, // 4: proto.seaport.v1.FeesService.GetFeeStructure:output_type -> proto.seaport.v1.FeeStructure
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_seaport_v1_fees_proto_init() }
func file_proto_seaport_v1_fees_proto_init() {
	if File_proto_seaport_v1_fees_proto != nil {
		return
	}
	file_proto_seaport_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_seaport_v1_fees_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeStructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_seaport_v1_fees_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_seaport_v1_fees_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_seaport_v1_fees_proto_goTypes,
		DependencyIndexes: file_proto_seaport_v1_fees_proto_depIdxs,
		MessageInfos:      file_proto_seaport_v1_fees_proto_msgTypes,
	}.Build()
	File_proto_seaport_v1_fees_proto = out.File
	file_proto_seaport_v1_fees_proto_rawDesc = nil
	file_proto_seaport_v1_fees_proto_goTypes = nil
	file_proto_seaport_v1_fees_proto_depIdxs = nil
}
