// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/seaport/v1/rfq.proto

package seaportv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// * The Action enum specifies whether the taker is requesting a quote to buy or sell an asset.
type Action int32

const (
	Action_ACTION_BUY     Action = 0
	Action_ACTION_SELL    Action = 1
	Action_ACTION_INVALID Action = 255
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0:   "ACTION_BUY",
		1:   "ACTION_SELL",
		255: "ACTION_INVALID",
	}
	Action_value = map[string]int32{
		"ACTION_BUY":     0,
		"ACTION_SELL":    1,
		"ACTION_INVALID": 255,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_seaport_v1_rfq_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_proto_seaport_v1_rfq_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_proto_seaport_v1_rfq_proto_rawDescGZIP(), []int{0}
}

// * The fields comprising the quote request message give the maker what they need to provide a quote/signed offer.
type QuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * The unique identifier for the quote request. This is used to match the
	// quote response to the quote request.
	Ulid *H128 `protobuf:"bytes,1,opt,name=ulid,proto3,oneof" json:"ulid,omitempty"`
	// * Ideally the maker would never know who the taker is, and vice-versa.
	// However, seaport reveals the makers' address to the taker.
	// takerAddress ensures there is no information asymmetry between
	// the maker and taker. Thought the trader may not always end up being
	// the taker.
	TakerAddress *H160    `protobuf:"bytes,2,opt,name=taker_address,json=takerAddress,proto3,oneof" json:"taker_address,omitempty"`
	ItemType     ItemType `protobuf:"varint,3,opt,name=item_type,json=itemType,proto3,enum=proto.seaport.v1.ItemType" json:"item_type,omitempty"`
	// The token address for which a quote is being requested.
	TokenAddress *H160 `protobuf:"bytes,4,opt,name=token_address,json=tokenAddress,proto3,oneof" json:"token_address,omitempty"`
	// * The identifier_or_criteria represents either the ERC721 or ERC1155
	// token identifier or, in the case of a criteria-based item type, a
	// merkle root composed of the valid set of token identifiers for
	// the item. This value will be ignored for Ether and ERC20 item types,
	// and can optionally be zero for criteria-based item types to allow
	// for any identifier.
	IdentifierOrCriteria *H256 `protobuf:"bytes,5,opt,name=identifier_or_criteria,json=identifierOrCriteria,proto3,oneof" json:"identifier_or_criteria,omitempty"`
	Amount               *H256 `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// * A request by the Taker to the Maker, i.e. if the request is Buy the Taker wants to buy the option from the
	// Maker, whereas Sell is the Taker wanting to sell to the Maker.
	Action Action `protobuf:"varint,7,opt,name=action,proto3,enum=proto.seaport.v1.Action" json:"action,omitempty"`
	// The EIP-155 chain_id for the chain for which the quote is requested.
	ChainId *H256 `protobuf:"bytes,8,opt,name=chain_id,json=chainId,proto3,oneof" json:"chain_id,omitempty"`
	// The address of the seaport contract for which the quote is requested.
	SeaportAddress *H160 `protobuf:"bytes,9,opt,name=seaport_address,json=seaportAddress,proto3,oneof" json:"seaport_address,omitempty"`
}

func (x *QuoteRequest) Reset() {
	*x = QuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_seaport_v1_rfq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteRequest) ProtoMessage() {}

func (x *QuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_seaport_v1_rfq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteRequest.ProtoReflect.Descriptor instead.
func (*QuoteRequest) Descriptor() ([]byte, []int) {
	return file_proto_seaport_v1_rfq_proto_rawDescGZIP(), []int{0}
}

func (x *QuoteRequest) GetUlid() *H128 {
	if x != nil {
		return x.Ulid
	}
	return nil
}

func (x *QuoteRequest) GetTakerAddress() *H160 {
	if x != nil {
		return x.TakerAddress
	}
	return nil
}

func (x *QuoteRequest) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_ITEM_TYPE_NATIVE
}

func (x *QuoteRequest) GetTokenAddress() *H160 {
	if x != nil {
		return x.TokenAddress
	}
	return nil
}

func (x *QuoteRequest) GetIdentifierOrCriteria() *H256 {
	if x != nil {
		return x.IdentifierOrCriteria
	}
	return nil
}

func (x *QuoteRequest) GetAmount() *H256 {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *QuoteRequest) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_BUY
}

func (x *QuoteRequest) GetChainId() *H256 {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *QuoteRequest) GetSeaportAddress() *H160 {
	if x != nil {
		return x.SeaportAddress
	}
	return nil
}

// The quote response message contains the quote/signed offer from the maker.
type QuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * The unique identifier for the quote request. This is used to match the
	// quote response to the quote request.
	Ulid *H128 `protobuf:"bytes,1,opt,name=ulid,proto3,oneof" json:"ulid,omitempty"`
	// * The address of the maker making the offer.
	MakerAddress *H160 `protobuf:"bytes,2,opt,name=maker_address,json=makerAddress,proto3,oneof" json:"maker_address,omitempty"`
	// * The order and signature from the maker.
	Order *SignedOrder `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	// The EIP-155 chain_id for the chain for which the offer was signed.
	ChainId *H256 `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3,oneof" json:"chain_id,omitempty"`
	// The address of the seaport contract for which the offer was signed.
	SeaportAddress *H160 `protobuf:"bytes,5,opt,name=seaport_address,json=seaportAddress,proto3,oneof" json:"seaport_address,omitempty"`
}

func (x *QuoteResponse) Reset() {
	*x = QuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_seaport_v1_rfq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteResponse) ProtoMessage() {}

func (x *QuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_seaport_v1_rfq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteResponse.ProtoReflect.Descriptor instead.
func (*QuoteResponse) Descriptor() ([]byte, []int) {
	return file_proto_seaport_v1_rfq_proto_rawDescGZIP(), []int{1}
}

func (x *QuoteResponse) GetUlid() *H128 {
	if x != nil {
		return x.Ulid
	}
	return nil
}

func (x *QuoteResponse) GetMakerAddress() *H160 {
	if x != nil {
		return x.MakerAddress
	}
	return nil
}

func (x *QuoteResponse) GetOrder() *SignedOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *QuoteResponse) GetChainId() *H256 {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *QuoteResponse) GetSeaportAddress() *H160 {
	if x != nil {
		return x.SeaportAddress
	}
	return nil
}

var File_proto_seaport_v1_rfq_proto protoreflect.FileDescriptor

var file_proto_seaport_v1_rfq_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x66, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x05, 0x0a,
	0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x04, 0x75, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x31, 0x32, 0x38, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x0d, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x31, 0x36, 0x30, 0x48, 0x01, 0x52,
	0x0c, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x31, 0x36, 0x30, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x16, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x32, 0x35, 0x36, 0x48, 0x03, 0x52, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x4f, 0x72, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x48, 0x04, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x31, 0x36, 0x30, 0x48, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x61,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x75, 0x6c, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x31, 0x32, 0x38, 0x48,
	0x00, 0x52, 0x04, 0x75, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x31, 0x36, 0x30, 0x48, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x48, 0x02, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x65, 0x61,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x31, 0x36, 0x30, 0x48, 0x03, 0x52, 0x0e, 0x73, 0x65,
	0x61, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6c, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x61, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x3e, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xff, 0x01, 0x32, 0xf7, 0x01, 0x0a, 0x0a,
	0x52, 0x46, 0x51, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x57, 0x65,
	0x62, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x05, 0x54, 0x61, 0x6b,
	0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x05, 0x4d, 0x61, 0x6b, 0x65, 0x72,
	0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x28, 0x01, 0x30, 0x01, 0x42, 0xc2, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x08,
	0x52, 0x66, 0x71, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x6d, 0x62, 0x61, 0x72, 0x6e, 0x65, 0x73,
	0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31,
	0x3b, 0x73, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x53, 0x58,
	0xaa, 0x02, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x65, 0x61, 0x70,
	0x6f, 0x72, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53,
	0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a, 0x53,
	0x65, 0x61, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_seaport_v1_rfq_proto_rawDescOnce sync.Once
	file_proto_seaport_v1_rfq_proto_rawDescData = file_proto_seaport_v1_rfq_proto_rawDesc
)

func file_proto_seaport_v1_rfq_proto_rawDescGZIP() []byte {
	file_proto_seaport_v1_rfq_proto_rawDescOnce.Do(func() {
		file_proto_seaport_v1_rfq_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_seaport_v1_rfq_proto_rawDescData)
	})
	return file_proto_seaport_v1_rfq_proto_rawDescData
}

var file_proto_seaport_v1_rfq_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_seaport_v1_rfq_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_seaport_v1_rfq_proto_goTypes = []interface{}{
	(Action)(0),           // 0: proto.seaport.v1.Action
	(*QuoteRequest)(nil),  // 1: proto.seaport.v1.QuoteRequest
	(*QuoteResponse)(nil), // 2: proto.seaport.v1.QuoteResponse
	(*H128)(nil),          // 3: proto.seaport.v1.H128
	(*H160)(nil),          // 4: proto.seaport.v1.H160
	(ItemType)(0),         // 5: proto.seaport.v1.ItemType
	(*H256)(nil),          // 6: proto.seaport.v1.H256
	(*SignedOrder)(nil),   // 7: proto.seaport.v1.SignedOrder
}
var file_proto_seaport_v1_rfq_proto_depIdxs = []int32{
	3,  // 0: proto.seaport.v1.QuoteRequest.ulid:type_name -> proto.seaport.v1.H128
	4,  // 1: proto.seaport.v1.QuoteRequest.taker_address:type_name -> proto.seaport.v1.H160
	5,  // 2: proto.seaport.v1.QuoteRequest.item_type:type_name -> proto.seaport.v1.ItemType
	4,  // 3: proto.seaport.v1.QuoteRequest.token_address:type_name -> proto.seaport.v1.H160
	6,  // 4: proto.seaport.v1.QuoteRequest.identifier_or_criteria:type_name -> proto.seaport.v1.H256
	6,  // 5: proto.seaport.v1.QuoteRequest.amount:type_name -> proto.seaport.v1.H256
	0,  // 6: proto.seaport.v1.QuoteRequest.action:type_name -> proto.seaport.v1.Action
	6,  // 7: proto.seaport.v1.QuoteRequest.chain_id:type_name -> proto.seaport.v1.H256
	4,  // 8: proto.seaport.v1.QuoteRequest.seaport_address:type_name -> proto.seaport.v1.H160
	3,  // 9: proto.seaport.v1.QuoteResponse.ulid:type_name -> proto.seaport.v1.H128
	4,  // 10: proto.seaport.v1.QuoteResponse.maker_address:type_name -> proto.seaport.v1.H160
	7,  // 11: proto.seaport.v1.QuoteResponse.order:type_name -> proto.seaport.v1.SignedOrder
	6,  // 12: proto.seaport.v1.QuoteResponse.chain_id:type_name -> proto.seaport.v1.H256
	4,  // 13: proto.seaport.v1.QuoteResponse.seaport_address:type_name -> proto.seaport.v1.H160
	1,  // 14: proto.seaport.v1.RFQService.WebTaker:input_type -> proto.seaport.v1.QuoteRequest
	1,  // 15: proto.seaport.v1.RFQService.Taker:input_type -> proto.seaport.v1.QuoteRequest
	2,  // 16: proto.seaport.v1.RFQService.Maker:input_type -> proto.seaport.v1.QuoteResponse
	2,  // 17: proto.seaport.v1.RFQService.WebTaker:output_type -> proto.seaport.v1.QuoteResponse
	2,  // 18: proto.seaport.v1.RFQService.Taker:output_type -> proto.seaport.v1.QuoteResponse
	1,  // 19: proto.seaport.v1.RFQService.Maker:output_type -> proto.seaport.v1.QuoteRequest
	17, // [17:20] is the sub-list for method output_type
	14, // [14:17] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_seaport_v1_rfq_proto_init() }
func file_proto_seaport_v1_rfq_proto_init() {
	if File_proto_seaport_v1_rfq_proto != nil {
		return
	}
	file_proto_seaport_v1_seaport_proto_init()
	file_proto_seaport_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_seaport_v1_rfq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_seaport_v1_rfq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_seaport_v1_rfq_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_seaport_v1_rfq_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_seaport_v1_rfq_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_seaport_v1_rfq_proto_goTypes,
		DependencyIndexes: file_proto_seaport_v1_rfq_proto_depIdxs,
		EnumInfos:         file_proto_seaport_v1_rfq_proto_enumTypes,
		MessageInfos:      file_proto_seaport_v1_rfq_proto_msgTypes,
	}.Build()
	File_proto_seaport_v1_rfq_proto = out.File
	file_proto_seaport_v1_rfq_proto_rawDesc = nil
	file_proto_seaport_v1_rfq_proto_goTypes = nil
	file_proto_seaport_v1_rfq_proto_depIdxs = nil
}
