// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/seaport/v1/fees.proto

package seaportv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/sambarnes/seaport-go/pkg/proto/seaport/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FeesServiceName is the fully-qualified name of the FeesService service.
	FeesServiceName = "proto.seaport.v1.FeesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FeesServiceGetFeeStructureProcedure is the fully-qualified name of the FeesService's
	// GetFeeStructure RPC.
	FeesServiceGetFeeStructureProcedure = "/proto.seaport.v1.FeesService/GetFeeStructure"
)

// FeesServiceClient is a client for the proto.seaport.v1.FeesService service.
type FeesServiceClient interface {
	// Returns the Valorem Fee structure.
	GetFeeStructure(context.Context, *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.FeeStructure], error)
}

// NewFeesServiceClient constructs a client for the proto.seaport.v1.FeesService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFeesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FeesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &feesServiceClient{
		getFeeStructure: connect_go.NewClient[v1.Empty, v1.FeeStructure](
			httpClient,
			baseURL+FeesServiceGetFeeStructureProcedure,
			opts...,
		),
	}
}

// feesServiceClient implements FeesServiceClient.
type feesServiceClient struct {
	getFeeStructure *connect_go.Client[v1.Empty, v1.FeeStructure]
}

// GetFeeStructure calls proto.seaport.v1.FeesService.GetFeeStructure.
func (c *feesServiceClient) GetFeeStructure(ctx context.Context, req *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.FeeStructure], error) {
	return c.getFeeStructure.CallUnary(ctx, req)
}

// FeesServiceHandler is an implementation of the proto.seaport.v1.FeesService service.
type FeesServiceHandler interface {
	// Returns the Valorem Fee structure.
	GetFeeStructure(context.Context, *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.FeeStructure], error)
}

// NewFeesServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFeesServiceHandler(svc FeesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	feesServiceGetFeeStructureHandler := connect_go.NewUnaryHandler(
		FeesServiceGetFeeStructureProcedure,
		svc.GetFeeStructure,
		opts...,
	)
	return "/proto.seaport.v1.FeesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FeesServiceGetFeeStructureProcedure:
			feesServiceGetFeeStructureHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFeesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFeesServiceHandler struct{}

func (UnimplementedFeesServiceHandler) GetFeeStructure(context.Context, *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.FeeStructure], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.seaport.v1.FeesService.GetFeeStructure is not implemented"))
}
