// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/seaport/v1/rfq.proto

package seaportv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/sambarnes/seaport-go/pkg/proto/seaport/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RFQServiceName is the fully-qualified name of the RFQService service.
	RFQServiceName = "proto.seaport.v1.RFQService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RFQServiceWebTakerProcedure is the fully-qualified name of the RFQService's WebTaker RPC.
	RFQServiceWebTakerProcedure = "/proto.seaport.v1.RFQService/WebTaker"
	// RFQServiceTakerProcedure is the fully-qualified name of the RFQService's Taker RPC.
	RFQServiceTakerProcedure = "/proto.seaport.v1.RFQService/Taker"
	// RFQServiceMakerProcedure is the fully-qualified name of the RFQService's Maker RPC.
	RFQServiceMakerProcedure = "/proto.seaport.v1.RFQService/Maker"
)

// RFQServiceClient is a client for the proto.seaport.v1.RFQService service.
type RFQServiceClient interface {
	// * Request quotes from makers via a single QuoteRequest message and receive a stream of QuoteResponse messages for use by gRPC-web clients.
	WebTaker(context.Context, *connect_go.Request[v1.QuoteRequest]) (*connect_go.ServerStreamForClient[v1.QuoteResponse], error)
	// * Request quotes from makers via a stream of QuoteRequest messages and receive a stream of QuoteResponse messages.
	Taker(context.Context) *connect_go.BidiStreamForClient[v1.QuoteRequest, v1.QuoteResponse]
	// * Send quotes to takers via a stream of QuoteResponse messages and receive a stream of QuoteRequest messages.
	Maker(context.Context) *connect_go.BidiStreamForClient[v1.QuoteResponse, v1.QuoteRequest]
}

// NewRFQServiceClient constructs a client for the proto.seaport.v1.RFQService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRFQServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RFQServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &rFQServiceClient{
		webTaker: connect_go.NewClient[v1.QuoteRequest, v1.QuoteResponse](
			httpClient,
			baseURL+RFQServiceWebTakerProcedure,
			opts...,
		),
		taker: connect_go.NewClient[v1.QuoteRequest, v1.QuoteResponse](
			httpClient,
			baseURL+RFQServiceTakerProcedure,
			opts...,
		),
		maker: connect_go.NewClient[v1.QuoteResponse, v1.QuoteRequest](
			httpClient,
			baseURL+RFQServiceMakerProcedure,
			opts...,
		),
	}
}

// rFQServiceClient implements RFQServiceClient.
type rFQServiceClient struct {
	webTaker *connect_go.Client[v1.QuoteRequest, v1.QuoteResponse]
	taker    *connect_go.Client[v1.QuoteRequest, v1.QuoteResponse]
	maker    *connect_go.Client[v1.QuoteResponse, v1.QuoteRequest]
}

// WebTaker calls proto.seaport.v1.RFQService.WebTaker.
func (c *rFQServiceClient) WebTaker(ctx context.Context, req *connect_go.Request[v1.QuoteRequest]) (*connect_go.ServerStreamForClient[v1.QuoteResponse], error) {
	return c.webTaker.CallServerStream(ctx, req)
}

// Taker calls proto.seaport.v1.RFQService.Taker.
func (c *rFQServiceClient) Taker(ctx context.Context) *connect_go.BidiStreamForClient[v1.QuoteRequest, v1.QuoteResponse] {
	return c.taker.CallBidiStream(ctx)
}

// Maker calls proto.seaport.v1.RFQService.Maker.
func (c *rFQServiceClient) Maker(ctx context.Context) *connect_go.BidiStreamForClient[v1.QuoteResponse, v1.QuoteRequest] {
	return c.maker.CallBidiStream(ctx)
}

// RFQServiceHandler is an implementation of the proto.seaport.v1.RFQService service.
type RFQServiceHandler interface {
	// * Request quotes from makers via a single QuoteRequest message and receive a stream of QuoteResponse messages for use by gRPC-web clients.
	WebTaker(context.Context, *connect_go.Request[v1.QuoteRequest], *connect_go.ServerStream[v1.QuoteResponse]) error
	// * Request quotes from makers via a stream of QuoteRequest messages and receive a stream of QuoteResponse messages.
	Taker(context.Context, *connect_go.BidiStream[v1.QuoteRequest, v1.QuoteResponse]) error
	// * Send quotes to takers via a stream of QuoteResponse messages and receive a stream of QuoteRequest messages.
	Maker(context.Context, *connect_go.BidiStream[v1.QuoteResponse, v1.QuoteRequest]) error
}

// NewRFQServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRFQServiceHandler(svc RFQServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	rFQServiceWebTakerHandler := connect_go.NewServerStreamHandler(
		RFQServiceWebTakerProcedure,
		svc.WebTaker,
		opts...,
	)
	rFQServiceTakerHandler := connect_go.NewBidiStreamHandler(
		RFQServiceTakerProcedure,
		svc.Taker,
		opts...,
	)
	rFQServiceMakerHandler := connect_go.NewBidiStreamHandler(
		RFQServiceMakerProcedure,
		svc.Maker,
		opts...,
	)
	return "/proto.seaport.v1.RFQService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RFQServiceWebTakerProcedure:
			rFQServiceWebTakerHandler.ServeHTTP(w, r)
		case RFQServiceTakerProcedure:
			rFQServiceTakerHandler.ServeHTTP(w, r)
		case RFQServiceMakerProcedure:
			rFQServiceMakerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRFQServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRFQServiceHandler struct{}

func (UnimplementedRFQServiceHandler) WebTaker(context.Context, *connect_go.Request[v1.QuoteRequest], *connect_go.ServerStream[v1.QuoteResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.seaport.v1.RFQService.WebTaker is not implemented"))
}

func (UnimplementedRFQServiceHandler) Taker(context.Context, *connect_go.BidiStream[v1.QuoteRequest, v1.QuoteResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.seaport.v1.RFQService.Taker is not implemented"))
}

func (UnimplementedRFQServiceHandler) Maker(context.Context, *connect_go.BidiStream[v1.QuoteResponse, v1.QuoteRequest]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.seaport.v1.RFQService.Maker is not implemented"))
}
