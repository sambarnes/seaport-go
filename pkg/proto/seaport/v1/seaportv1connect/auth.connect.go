// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/seaport/v1/auth.proto

package seaportv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/sambarnes/seaport-go/pkg/proto/seaport/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "proto.seaport.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceNonceProcedure is the fully-qualified name of the AuthService's Nonce RPC.
	AuthServiceNonceProcedure = "/proto.seaport.v1.AuthService/Nonce"
	// AuthServiceVerifyProcedure is the fully-qualified name of the AuthService's Verify RPC.
	AuthServiceVerifyProcedure = "/proto.seaport.v1.AuthService/Verify"
	// AuthServiceAuthenticateProcedure is the fully-qualified name of the AuthService's Authenticate
	// RPC.
	AuthServiceAuthenticateProcedure = "/proto.seaport.v1.AuthService/Authenticate"
)

// AuthServiceClient is a client for the proto.seaport.v1.AuthService service.
type AuthServiceClient interface {
	// * Returns an EIP-4361 nonce for session and invalidates existing session
	Nonce(context.Context, *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.NonceResponse], error)
	// * Verifies the SignedMessage is valid and returns the verified address
	Verify(context.Context, *connect_go.Request[v1.VerifyRequest]) (*connect_go.Response[v1.H160], error)
	// * Used to check if a given connection is authenticated, returns the address which is authenticated for a nonce cookie
	Authenticate(context.Context, *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.H160], error)
}

// NewAuthServiceClient constructs a client for the proto.seaport.v1.AuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		nonce: connect_go.NewClient[v1.Empty, v1.NonceResponse](
			httpClient,
			baseURL+AuthServiceNonceProcedure,
			opts...,
		),
		verify: connect_go.NewClient[v1.VerifyRequest, v1.H160](
			httpClient,
			baseURL+AuthServiceVerifyProcedure,
			opts...,
		),
		authenticate: connect_go.NewClient[v1.Empty, v1.H160](
			httpClient,
			baseURL+AuthServiceAuthenticateProcedure,
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	nonce        *connect_go.Client[v1.Empty, v1.NonceResponse]
	verify       *connect_go.Client[v1.VerifyRequest, v1.H160]
	authenticate *connect_go.Client[v1.Empty, v1.H160]
}

// Nonce calls proto.seaport.v1.AuthService.Nonce.
func (c *authServiceClient) Nonce(ctx context.Context, req *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.NonceResponse], error) {
	return c.nonce.CallUnary(ctx, req)
}

// Verify calls proto.seaport.v1.AuthService.Verify.
func (c *authServiceClient) Verify(ctx context.Context, req *connect_go.Request[v1.VerifyRequest]) (*connect_go.Response[v1.H160], error) {
	return c.verify.CallUnary(ctx, req)
}

// Authenticate calls proto.seaport.v1.AuthService.Authenticate.
func (c *authServiceClient) Authenticate(ctx context.Context, req *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.H160], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the proto.seaport.v1.AuthService service.
type AuthServiceHandler interface {
	// * Returns an EIP-4361 nonce for session and invalidates existing session
	Nonce(context.Context, *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.NonceResponse], error)
	// * Verifies the SignedMessage is valid and returns the verified address
	Verify(context.Context, *connect_go.Request[v1.VerifyRequest]) (*connect_go.Response[v1.H160], error)
	// * Used to check if a given connection is authenticated, returns the address which is authenticated for a nonce cookie
	Authenticate(context.Context, *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.H160], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	authServiceNonceHandler := connect_go.NewUnaryHandler(
		AuthServiceNonceProcedure,
		svc.Nonce,
		opts...,
	)
	authServiceVerifyHandler := connect_go.NewUnaryHandler(
		AuthServiceVerifyProcedure,
		svc.Verify,
		opts...,
	)
	authServiceAuthenticateHandler := connect_go.NewUnaryHandler(
		AuthServiceAuthenticateProcedure,
		svc.Authenticate,
		opts...,
	)
	return "/proto.seaport.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceNonceProcedure:
			authServiceNonceHandler.ServeHTTP(w, r)
		case AuthServiceVerifyProcedure:
			authServiceVerifyHandler.ServeHTTP(w, r)
		case AuthServiceAuthenticateProcedure:
			authServiceAuthenticateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Nonce(context.Context, *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.NonceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.seaport.v1.AuthService.Nonce is not implemented"))
}

func (UnimplementedAuthServiceHandler) Verify(context.Context, *connect_go.Request[v1.VerifyRequest]) (*connect_go.Response[v1.H160], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.seaport.v1.AuthService.Verify is not implemented"))
}

func (UnimplementedAuthServiceHandler) Authenticate(context.Context, *connect_go.Request[v1.Empty]) (*connect_go.Response[v1.H160], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.seaport.v1.AuthService.Authenticate is not implemented"))
}
